{"version":3,"sources":["Person/style.css","App.css","Person/index.js","Validation/index.js","Input/index.js","Char/index.js","ErrorBoundary/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","person","app","red","bold","Person","props","_props","Object","objectSpread","name","children","age","clicked","changed","Error","Validation","length","msg","react_default","a","createElement","Input","value","className","type","onChange","src_Validation","Char","style","display","padding","textAlign","margin","border","onClick","Index","state","hasError","errorMessage","componentDidCatch","error","info","_this","setState","this","Component","App","persons","id","isVisible","inputVal","handleClickBtn","oldVal","deletePerson","index","toConsumableArray","splice","handleChange","event","personIndex","findIndex","p","target","changeInput","handleClickChar","charArray","split","newVal","join","_this2","_this$state","personsList","charsList","map","ErrorBoundary","key","src_Person","char","src_Char","classes","push","styles","src_Input","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b35bbf9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"person\":\"style__person__1b8CY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App__app__NghkZ\",\"red\":\"App__red__lKdi_\",\"bold\":\"App__bold__1Ylab\"};","import React from 'react';\nimport styles from './style.css';\n\nconst Person = (props) => {\n  let { name, children, age, clicked, changed } = { ...props };\n  throw new Error('error')\n  return (\n    <div className={styles.person}>\n      <p onClick={clicked}>I'm a {name}. My age is {age}</p>\n      <p>{children}</p>\n      <input type=\"text\"\n             onChange={changed}\n             value={name}/>\n    </div>\n  );\n};\n\nexport default Person;\n","import React from 'react';\n\nconst Validation = (props) => {\n  let {length} = {...props};\n  let msg = null;\n  if (length < 5) {\n    msg = 'Too short'\n  } else if (length > 7) {\n    msg = 'Too long'\n  }\n  return (\n    <p>{msg}</p>\n  );\n};\n\nexport default Validation;\n","import React from 'react';\nimport Validation from '../Validation'\n\nconst Input = (props) => {\n  let {value, changed} = {...props};\n  return (\n    <div className=\"input\">\n      <input type=\"text\"\n             onChange={changed}\n             value={value}/>\n      <p>Length: {value.length}</p>\n      <Validation length={value.length}/>\n    </div>\n  );\n};\n\nexport default Input;\n","import React from 'react';\n\nconst Char = (props) => {\n  const style = {\n    display: 'inline-block',\n    padding: '16px',\n    textAlign: 'center',\n    margin: '16px',\n    border: '1px solid'\n  }\n  return (\n    <span style={style} onClick={props.clicked}>{props.value}</span>\n  );\n};\n\nexport default Char;\n","import React, {Component} from 'react';\n\nclass Index extends Component {\n  state = {\n    hasError: false,\n    errorMessage: ''\n  }\n\n  componentDidCatch = (error, info) => {\n    this.setState({hasError: true, errorMessage: error});\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>{this.state.errorMessage}</h1>\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default Index;\n","import React, {Component} from 'react';\nimport styles from './App.css';\nimport Person from './Person'\nimport Input from './Input'\nimport Char from './Char'\nimport ErrorBoundary from './ErrorBoundary'\n\nclass App extends Component {\n  state = {\n    persons: [\n      { name: 'Max', age: 30, info: 'Any info', id: 'skdjskd1' },\n      { name: 'Maxim', age: 29, id: 'ldflkdlf2' }\n    ],\n    isVisible: false,\n    inputVal: ''\n  };\n\n  handleClickBtn = () => {\n    let oldVal = this.state.isVisible;\n    this.setState({ isVisible: !oldVal });\n  }\n\n  deletePerson = (index) => {\n    const persons = [ ...this.state.persons ];\n    persons.splice(index, 1);\n    this.setState({\n      persons: persons\n    });\n  }\n\n  handleChange = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n    const person = { ...this.state.persons[ personIndex ] };\n    person.name = event.target.value;\n    const persons = [ ...this.state.persons ];\n    persons[ personIndex ] = person;\n    this.setState({ persons: persons });\n  }\n\n  changeInput = (event) => {\n    this.setState({ inputVal: event.target.value });\n  }\n\n  handleClickChar = (index) => {\n    let charArray = this.state.inputVal.split('');\n    charArray.splice(index, 1);\n    let newVal = charArray.join('');\n    this.setState({ inputVal: newVal });\n  }\n\n  render() {\n    let { persons, isVisible, inputVal } = { ...this.state };\n\n    let personsList = null;\n    let charsList = null;\n    if (isVisible) {\n      personsList = persons.map((person, index) => {\n        return <ErrorBoundary key={person.id}>\n          <Person name={person.name}\n                  age={person.age}\n                  changed={(event) => this.handleChange(event, person.id)}\n                  clicked={() => this.deletePerson(index)}>{person.info}</Person>;\n        </ErrorBoundary>\n      });\n    }\n    if (inputVal.length) {\n      charsList = inputVal.split('').map((char, index) => {\n        return <Char value={char}\n                     key={index}\n                     clicked={() => this.handleClickChar(index)}/>\n      })\n    }\n\n    const classes = [];\n\n    if (persons.length <= 2) {\n      classes.push(styles.red);\n    }\n\n    if (persons.length <= 1) {\n      classes.push(styles.bold);\n    }\n\n    return (\n      <div className={styles.app}>\n        <p className={classes.join(' ')}>Colored message</p>\n        <button className={isVisible ? '' : styles.red}\n                onClick={this.handleClickBtn}\n        >Click\n        </button>\n        {personsList}\n        <Input changed={(event) => this.changeInput(event)} value={inputVal}/>\n        {charsList}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}